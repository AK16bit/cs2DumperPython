from typing import *

class NimPyException(Exception): ...



# Process
class Process(TypedDict):
    name: str
    pid: int
    debug: bool
    handle: int
def enum_processes() -> Iterator[Process]: ...
def open_process(process: Union[str, int], debug: bool = False) -> Process: ...
def process_exists(processName: str) -> bool: ...
def pid_exists(pid: int) -> bool: ...
def process_running(process: Process) -> bool: ...
def get_process_id(processName: str) -> int: ...
def get_process_name(pid: int) -> str: ...
def get_process_path(process: Process) -> str: ...
def close_process(process: Process) -> None: ...

# Module
class Module(TypedDict):
    name: str
    base: int
    end: int
    size: int
def enum_modules(process: Process) -> Generator[Module, None, None]: ...
def get_module(process: Process, moduleName: str) -> Module: ...
def module_exists(process: Process, moduleName: str) -> bool: ...


# System
def system_name() -> str: ...
def is_64_bit(process: Process) -> bool: ...
def get_os_error() -> Union[int, str]: ...


# Memory
def aob_scan_module(process: Process, moduleName: str, pattern: str, relative: bool = False, single: bool = True, algorithm: int = 0) -> List[int]: ...
def aob_scan_range(process: Process, pattern: str, rangeStart: int, rangeEnd: int, relative: bool = False, single: bool = True, algorithm: int = 0) -> List[int]: ...
def aob_scan_bytes(pattern: str, byteBuffer: bytes, single: bool = True, algorithm: int = 0) -> List[int]: ...
def r_ctype(process: Process, address: int, ctype: Any) -> Any: ...
def r_bytes(process: Process, address: int, size: int): ...
def r_string(process: Process, address: int, size: int = 30) -> str: ...
def allocate_memory(process: Process, size: int, protection: int = 0) -> int: ...
def free_memory(process: Process, address: int) -> bool: ...